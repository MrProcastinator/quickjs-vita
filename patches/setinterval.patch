diff --git a/quickjs-libc.c b/quickjs-libc.c
index e180dd0..d51657e 100644
--- a/quickjs-libc.c
+++ b/quickjs-libc.c
@@ -91,6 +91,7 @@ typedef struct {
     struct list_head link;
     BOOL has_object;
     int64_t timeout;
+    int64_t interval;
     JSValue func;
 } JSOSTimer;
 
@@ -2015,21 +2016,13 @@ static void js_os_timer_mark(JSRuntime *rt, JSValueConst val,
     }
 }
 
-static JSValue js_os_setTimeout(JSContext *ctx, JSValueConst this_val,
-                                int argc, JSValueConst *argv)
+static JSValue js_os_create_timer(JSContext *ctx, int64_t interval,
+                                int64_t delay, JSValueConst func)
 {
     JSRuntime *rt = JS_GetRuntime(ctx);
     JSThreadState *ts = JS_GetRuntimeOpaque(rt);
-    int64_t delay;
-    JSValueConst func;
     JSOSTimer *th;
     JSValue obj;
-
-    func = argv[0];
-    if (!JS_IsFunction(ctx, func))
-        return JS_ThrowTypeError(ctx, "not a function");
-    if (JS_ToInt64(ctx, &delay, argv[1]))
-        return JS_EXCEPTION;
     obj = JS_NewObjectClass(ctx, js_os_timer_class_id);
     if (JS_IsException(obj))
         return obj;
@@ -2039,6 +2032,7 @@ static JSValue js_os_setTimeout(JSContext *ctx, JSValueConst this_val,
         return JS_EXCEPTION;
     }
     th->has_object = TRUE;
+    th->interval = interval;
     th->timeout = get_time_ms() + delay;
     th->func = JS_DupValue(ctx, func);
     list_add_tail(&th->link, &ts->os_timers);
@@ -2046,6 +2040,48 @@ static JSValue js_os_setTimeout(JSContext *ctx, JSValueConst this_val,
     return obj;
 }
 
+static JSValue js_os_setTimeout(JSContext *ctx, JSValueConst this_val,
+                                int argc, JSValueConst *argv)
+{
+    int64_t delay;
+    JSValueConst func;
+
+    func = argv[0];
+    if (!JS_IsFunction(ctx, func))
+        return JS_ThrowTypeError(ctx, "not a function");
+    if (JS_ToInt64(ctx, &delay, argv[1]))
+        return JS_EXCEPTION;
+
+    return js_os_create_timer(ctx, 0, delay, func);
+}
+
+static JSValue js_os_setInterval(JSContext *ctx, JSValueConst this_val,
+                                int argc, JSValueConst *argv)
+{
+    int64_t delay;
+    JSValueConst func;
+
+    func = argv[0];
+    if (!JS_IsFunction(ctx, func))
+        return JS_ThrowTypeError(ctx, "not a function");
+    if (JS_ToInt64(ctx, &delay, argv[1]))
+        return JS_EXCEPTION;
+
+    return js_os_create_timer(ctx, delay, delay, func);
+}
+
+static JSValue js_os_setImmediate(JSContext *ctx, JSValueConst this_val,
+                                int argc, JSValueConst *argv)
+{
+    JSValueConst func;
+
+    func = argv[0];
+    if (!JS_IsFunction(ctx, func))
+        return JS_ThrowTypeError(ctx, "not a function");
+
+    return js_os_create_timer(ctx, 0, 0, func);
+}
+
 static JSValue js_os_clearTimeout(JSContext *ctx, JSValueConst this_val,
                                   int argc, JSValueConst *argv)
 {
@@ -2095,20 +2131,25 @@ static int js_os_poll(JSContext *ctx)
     if (!list_empty(&ts->os_timers)) {
         cur_time = get_time_ms();
         min_delay = 10000;
         list_for_each(el, &ts->os_timers) {
             JSOSTimer *th = list_entry(el, JSOSTimer, link);
             delay = th->timeout - cur_time;
             if (delay <= 0) {
                 JSValue func;
                 /* the timer expired */
                 func = th->func;
-                th->func = JS_UNDEFINED;
-                unlink_timer(rt, th);
-                if (!th->has_object)
-                    free_timer(rt, th);
-                call_handler(ctx, func);
-                JS_FreeValue(ctx, func);
-                return 0;
+                if (th->interval > 0) {
+                    th->timeout = cur_time + th->interval;
+                    call_handler(ctx, func);
+                } else {
+                    th->func = JS_UNDEFINED;
+                    unlink_timer(rt, th);
+                    if (!th->has_object)
+                        free_timer(rt, th);
+                    call_handler(ctx, func);
+                    JS_FreeValue(ctx, func);
+                    return 0;
+                }
             } else if (delay < min_delay) {
                 min_delay = delay;
             }
@@ -2271,13 +2312,18 @@ static int js_os_poll(JSContext *ctx)
                 JSValue func;
                 /* the timer expired */
                 func = th->func;
-                th->func = JS_UNDEFINED;
-                unlink_timer(rt, th);
-                if (!th->has_object)
-                    free_timer(rt, th);
-                call_handler(ctx, func);
-                JS_FreeValue(ctx, func);
-                return 0;
+                if (th->interval > 0) {
+                    th->timeout = cur_time + th->interval;
+                    call_handler(ctx, func);
+                } else {
+                    th->func = JS_UNDEFINED;
+                    unlink_timer(rt, th);
+                    if (!th->has_object)
+                        free_timer(rt, th);
+                    call_handler(ctx, func);
+                    JS_FreeValue(ctx, func);
+                    return 0;
+                }
             } else if (delay < min_delay) {
                 min_delay = delay;
             }
@@ -3622,7 +3668,10 @@ static const JSCFunctionListEntry js_os_funcs[] = {
     OS_FLAG(SIGTTOU),
 #endif
     JS_CFUNC_DEF("setTimeout", 2, js_os_setTimeout ),
+    JS_CFUNC_DEF("setInterval", 2, js_os_setInterval ),
+    JS_CFUNC_DEF("setImmediate", 2, js_os_setImmediate ),
     JS_CFUNC_DEF("clearTimeout", 1, js_os_clearTimeout ),
+    JS_CFUNC_DEF("clearInterval", 1, js_os_clearTimeout ),
     JS_PROP_STRING_DEF("platform", OS_PLATFORM, 0 ),
     JS_CFUNC_DEF("getcwd", 0, js_os_getcwd ),
     JS_CFUNC_DEF("chdir", 0, js_os_chdir ),
